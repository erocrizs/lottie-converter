{"version":3,"sources":["src/index.js"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_regeneratorDefine","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","converting","cancelled","lottieDetails","frameSrc","previewInterval","logContainer","document","querySelector","playerCanvas","player","sprites","btnLoad","btnConvert","btnDownload","inputSpriteName","inputLottieUrl","inputWidth","inputHeight","inputScale","inputOWidth","inputOHeight","inputOFps","inputFps","inputOFrames","inputFrames","preview","log","message","msgElem","createElement","innerText","appendChild","scrollTop","scrollHeight","loadAsImage","markup","img","Image","res","rej","onload","onerror","src","encodeURIComponent","frameMapping","sourceFrames","targetFrames","mapping","step","sourceFrame","Math","floor","min","convert","_ref","_callee2","_listener","_context3","values","forEach","url","URL","revokeObjectURL","style","display","clearInterval","textContent","innerHTML","listener","_ref2","_callee","_loop","_context2","stop","setLoop","_t","_context","concat","setFrame","reject","toBlob","blob","createObjectURL","width","height","border","margin","cursor","title","className","dataset","frame","addEventListener","spriteName","link","href","download","body","click","removeChild","remove","toString","newFrames","_regeneratorValues","removeEventListener","play","currentFrame","interval","setInterval","disabled","load","autoplay","loop","getLottieDetails","_ref3","_callee3","result","json","_context4","fetch","h","frames","op","ip","fps","fr","_x","_callee4","_context5","resize","_lottieDetails","newWidth","newHeight","newScale","duration","newFrameCount","_callee5","zip","_context6","JSZip","Array","from","querySelectorAll","all","map","sprite","response","file","generateAsync","type","content"],"mappings":"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","file":"src.28bcb41c.js","sourceRoot":"..","sourcesContent":["let converting = false;\r\nlet cancelled = false;\r\nlet lottieDetails = null;\r\nlet frameSrc = {};\r\nlet previewInterval = null;\r\n\r\nconst logContainer = document.querySelector(\"#logs\");\r\nconst playerCanvas = document.querySelector(\"#lottie-player\");\r\nconst player = document.querySelector(\"#lottie-player\").player;\r\nconst sprites = document.querySelector(\"#sprites\");\r\nconst btnLoad = document.querySelector(\"#load\");\r\nconst btnConvert = document.querySelector(\"#convert\");\r\nconst btnDownload = document.querySelector(\"#download\");\r\nconst inputSpriteName = document.querySelector(\"#sprite-name\");\r\nconst inputLottieUrl = document.querySelector(\"#lottieUrl\");\r\nconst inputWidth = document.querySelector(\"#width\");\r\nconst inputHeight = document.querySelector(\"#height\");\r\nconst inputScale = document.querySelector(\"#scale\");\r\nconst inputOWidth = document.querySelector(\"#o-width\");\r\nconst inputOHeight = document.querySelector(\"#o-height\");\r\nconst inputOFps = document.querySelector(\"#o-fps\");\r\nconst inputFps = document.querySelector(\"#fps\");\r\nconst inputOFrames = document.querySelector(\"#o-frames\");\r\nconst inputFrames = document.querySelector(\"#frames\");\r\nconst preview = document.querySelector(\"#preview\");\r\n\r\nconst log = message => {\r\n  const msgElem = document.createElement(\"p\");\r\n  msgElem.innerText = message;\r\n  logContainer.appendChild(msgElem);\r\n  logContainer.scrollTop = logContainer.scrollHeight;\r\n};\r\n\r\nconst loadAsImage = markup => {\r\n  const img = new Image();\r\n  return new Promise((res, rej) => {\r\n    img.onload = e => res(img);\r\n    img.onerror = rej;\r\n    img.src = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(markup);\r\n  });\r\n};\r\n\r\nconst frameMapping = (sourceFrames, targetFrames) => {\r\n  const mapping = {};\r\n\r\n  if (sourceFrames === targetFrames) {\r\n    // Direct 1:1 mapping\r\n    for (let i = 0; i < targetFrames; i++) {\r\n      mapping[i] = i;\r\n    }\r\n  } else if (sourceFrames > targetFrames) {\r\n    const step = sourceFrames / targetFrames;\r\n    for (let i = 0; i < targetFrames; i++) {\r\n      const sourceFrame = Math.floor(i * step);\r\n      mapping[i] = Math.min(sourceFrame, sourceFrames - 1);\r\n    }\r\n  } else {\r\n    const step = targetFrames / sourceFrames;\r\n    for (let i = 0; i < targetFrames; i++) {\r\n      const sourceFrame = Math.floor(i / step);\r\n      mapping[i] = Math.min(sourceFrame, sourceFrames - 1);\r\n    }\r\n  }\r\n  \r\n  return mapping;\r\n}\r\n\r\nconst convert = async () => {\r\n  Object.values(frameSrc).forEach(url => \r\n    URL.revokeObjectURL(url)\r\n  );\r\n  frameSrc = {};\r\n  preview.style.display = 'none';\r\n  if (previewInterval) {\r\n    clearInterval(previewInterval);\r\n    previewInterval = null;\r\n  }\r\n\r\n  if (converting) {\r\n    cancelled = true;\r\n    converting = false;\r\n    btnConvert.textContent = 'Convert to Sprite';\r\n    return;\r\n  }\r\n\r\n  sprites.innerHTML = '';\r\n  converting = true;\r\n  cancelled = false;\r\n  btnConvert.textContent = 'Cancel Conversion';\r\n\r\n  log(`Set sprite dimensions...`);\r\n\r\n  let player = playerCanvas.player\r\n  const listener = async () => {\r\n    player.stop();\r\n    player.setLoop(false);\r\n\r\n    for (let f = 0; f < lottieDetails.newFrames; f++) {\r\n      if (cancelled) {\r\n        converting = false;\r\n        break;\r\n      }\r\n\r\n      log(`Rendering frame #${f} from frame #${lottieDetails.frameMapping[f]}...`);\r\n      player.setFrame(lottieDetails.frameMapping[f]);\r\n      // await new Promise(resolve => setTimeout(() => resolve(), 1000));\r\n\r\n      try {\r\n        // Test: Get frame as blob URI and create img element\r\n        await new Promise((resolve, reject) => {\r\n          playerCanvas.toBlob((blob) => {\r\n            if (blob) {\r\n              const url = URL.createObjectURL(blob);\r\n              const img = document.createElement('img');\r\n              img.src = url;\r\n              img.style.width = '100px';\r\n              img.style.height = '100px';\r\n              img.style.border = '1px solid red';\r\n              img.style.margin = '2px';\r\n              img.style.cursor = 'pointer';\r\n              img.title = `Frame ${f} - Click to download`;\r\n              img.className = 'sprite-frame';\r\n              img.dataset.frame = f;\r\n              \r\n              // Add click handler to download the image\r\n              img.addEventListener('click', () => {\r\n                const spriteName = inputSpriteName.value || 'sprite';\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n                link.download = `${spriteName}_${f}.png`;\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                document.body.removeChild(link);\r\n                \r\n                // Remove the image after download\r\n                img.remove();\r\n              });\r\n              sprites.appendChild(img);\r\n              log(`Frame ${f}: Created blob URI and img element`);\r\n              frameSrc[f] = url;\r\n              resolve();\r\n            } else {\r\n              log(`Frame ${f}: Failed to create blob`);\r\n              reject();\r\n            }\r\n          }, 'image/png');\r\n        });\r\n      } catch (e) {\r\n        log(`Frame ${f} error: ${e.toString()}`)\r\n      }\r\n    }\r\n\r\n    log(`Done!`);\r\n    player.removeEventListener(\"load\", listener);\r\n    converting = false;\r\n    btnConvert.textContent = 'Convert to Sprite';\r\n    player.setLoop(true);\r\n    player.setFrame(0);\r\n    player.play();\r\n    previewInterval = (() => {\r\n      let currentFrame = 0;\r\n      preview.src = frameSrc[0];\r\n      const interval = 1000 / inputFps.value;\r\n      log(`Preview interval: ${interval}ms`);\r\n      return setInterval(() => {\r\n        currentFrame = (currentFrame + 1) % lottieDetails.newFrames;\r\n        preview.src = frameSrc[currentFrame];\r\n      }, interval);\r\n    })();\r\n    preview.style.display = 'block';\r\n    preview.width = inputWidth.value;\r\n    preview.height = inputHeight.value;\r\n  }\r\n\r\n  // Load into player\r\n  player.addEventListener(\"load\", listener);\r\n\r\n  log(`Startng animation...`);\r\n  btnDownload.disabled = false;\r\n  player.load({\r\n    autoplay: false,\r\n    loop: false,\r\n    src: lottieDetails.url,\r\n  });\r\n};\r\n\r\nconst getLottieDetails = async url => {\r\n  const result = await fetch(url);\r\n  const json = await result.json();\r\n\r\n  lottieDetails = {\r\n    url,\r\n    height: json.h,\r\n    width: json.w,\r\n    frames: json.op - json.ip + 1,\r\n    newFrames: json.op - json.ip + 1,\r\n    frameMapping: frameMapping(json.op - json.ip + 1, json.op - json.ip + 1),\r\n    fps: json.fr\r\n  };\r\n};\r\n\r\nif (btnLoad) {\r\n  btnLoad.addEventListener(\"click\", async () => {\r\n    log(`Loading ${inputLottieUrl.value}`);\r\n    await getLottieDetails(inputLottieUrl.value);\r\n    playerCanvas.player.load({\r\n      autoplay: true,\r\n      loop: true,\r\n      src: inputLottieUrl.value,\r\n    });\r\n\r\n    cancelled = false;\r\n    btnConvert.disabled = false;\r\n    btnDownload.disabled = true;\r\n    inputOWidth.value = lottieDetails.width;\r\n    inputOHeight.value = lottieDetails.height;\r\n    inputWidth.value = lottieDetails.width;\r\n    inputHeight.value = lottieDetails.height;\r\n    playerCanvas.width = lottieDetails.width;\r\n    playerCanvas.height = lottieDetails.height;\r\n    playerCanvas.player.resize();\r\n    inputScale.value = 1;\r\n    inputOFps.value = lottieDetails.fps;\r\n    inputFps.value = lottieDetails.fps;\r\n    inputOFrames.value = lottieDetails.frames;\r\n    inputFrames.value = lottieDetails.frames;\r\n    \r\n    Object.values(frameSrc).forEach(url => \r\n      URL.revokeObjectURL(url)\r\n    );\r\n    frameSrc = {};\r\n    preview.style.display = 'none';\r\n    if (previewInterval) {\r\n      clearInterval(previewInterval);\r\n      previewInterval = null;\r\n    }\r\n  });\r\n}\r\n\r\nif (inputLottieUrl) {\r\n  inputLottieUrl.addEventListener(\"change\", () => {\r\n    btnConvert.disabled = lottieDetails?.url !== inputLottieUrl.value;\r\n  });\r\n}\r\n\r\nif (btnConvert) {\r\n  btnConvert.addEventListener(\"click\", () => {\r\n    convert();\r\n  });\r\n}\r\n\r\nif (inputScale) {\r\n  inputScale.addEventListener(\"change\", () => {\r\n    const newWidth = lottieDetails.width * inputScale.value;\r\n    const newHeight = lottieDetails.height * inputScale.value;\r\n    \r\n    playerCanvas.width = newWidth;\r\n    playerCanvas.height = newHeight;\r\n    playerCanvas.player.resize();\r\n    \r\n    inputWidth.value = newWidth;\r\n    inputHeight.value = newHeight;\r\n  });\r\n}\r\n\r\nif (inputWidth) {\r\n  inputWidth.addEventListener(\"change\", () => {\r\n    const newScale = inputWidth.value / lottieDetails.width;\r\n    const newHeight = lottieDetails.height * newScale;\r\n    \r\n    inputScale.value = newScale;\r\n    inputHeight.value = newHeight;\r\n    \r\n    playerCanvas.width = inputWidth.value;\r\n    playerCanvas.height = newHeight;\r\n    playerCanvas.player.resize();\r\n  });\r\n}\r\n\r\nif (inputHeight) {\r\n  inputHeight.addEventListener(\"change\", () => {\r\n    const newScale = inputHeight.value / lottieDetails.height;\r\n    const newWidth = lottieDetails.width * newScale;\r\n    \r\n    inputScale.value = newScale;\r\n    inputWidth.value = newWidth;\r\n    \r\n    playerCanvas.width = newWidth;\r\n    playerCanvas.height = inputHeight.value;\r\n    playerCanvas.player.resize();\r\n  });\r\n}\r\n\r\nif (inputFps) {\r\n  inputFps.addEventListener(\"change\", () => {\r\n    const duration = lottieDetails.frames / lottieDetails.fps;\r\n    const newFrameCount = Math.floor(duration * inputFps.value);\r\n    const newFrames = frameMapping(lottieDetails.frames, newFrameCount);\r\n    inputFrames.value = newFrameCount;\r\n    lottieDetails.newFrames = newFrameCount;\r\n    lottieDetails.frameMapping = newFrames;\r\n  });\r\n}\r\n\r\nif (btnDownload) {\r\n  btnDownload.addEventListener(\"click\", async () => {\r\n    const zip = new JSZip();\r\n    const sprites = Array.from(document.querySelectorAll(\".sprite-frame\"));\r\n    await Promise.all(sprites.map(sprite => {\r\n      return fetch(sprite.src)\r\n        .then(response => response.blob())\r\n        .then(blob => {\r\n          zip.file(`${inputSpriteName.value}_${sprite.dataset.frame}.png`, blob);\r\n        });\r\n    }));\r\n    zip.generateAsync({ type: \"blob\" }).then(content => {\r\n      const link = document.createElement(\"a\");\r\n      link.href = URL.createObjectURL(content);\r\n      link.download = `${inputSpriteName.value}.zip`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    });\r\n  });\r\n}"]}